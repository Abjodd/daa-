import java.util.Scanner;

public class Dijkstra {
    public static void dijkstra(int n, int v, int[][] cost, int[] dist) {
        boolean[] visited = new boolean[n];
        for (int i = 0; i < n; i++) {
            dist[i] = cost[v][i];
        }
        dist[v] = 0;
        visited[v] = true;

        for (int count = 1; count < n; count++) {
            int minDist = Integer.MAX_VALUE, u = -1;
            for (int i = 0; i < n; i++) {
                if (!visited[i] && dist[i] < minDist) {
                    minDist = dist[i];
                    u = i;
                }
            }
            if (u == -1) break;
            visited[u] = true;
            for (int i = 0; i < n; i++) {
                if (!visited[i] && cost[u][i] != 999 && dist[u] + cost[u][i] < dist[i]) {
                    dist[i] = dist[u] + cost[u][i];
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of nodes: ");
        int n = scanner.nextInt();

        int[][] cost = new int[n][n];
        int[] dist = new int[n];

        System.out.println("Enter the cost matrix:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cost[i][j] = scanner.nextInt();
                if (cost[i][j] == 0 && i != j) {
                    cost[i][j] = 999; // Use 999 to represent infinity
                }
            }
        }

        System.out.print("Enter the source vertex: ");
        int v = scanner.nextInt() - 1;

        dijkstra(n, v, cost, dist);

        System.out.println("Shortest paths from vertex " + (v + 1) + ":");
        for (int i = 0; i < n; i++) {
            if (i != v) {
                System.out.println((v + 1) + " -> " + (i + 1) + " : " + dist[i]);
            }
        }

        scanner.close();
    }
}
