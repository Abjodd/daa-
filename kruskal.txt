import java.util.Scanner;

public class Kruskal {
    static int[] parent = new int[9];

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of vertices: ");
        int n = scanner.nextInt();

        int[][] cost = new int[n][n];
        System.out.println("Enter the cost adjacency matrix:");
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                cost[i][j] = scanner.nextInt() == 0 ? 999 : scanner.nextInt();

        int mincost = 0, edges = 0;
        while (edges < n - 1) {
            int min = 999, a = -1, b = -1;
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    if (find(i) != find(j) && cost[i][j] < min) {
                        min = cost[i][j];
                        a = i;
                        b = j;
                    }

            if (a != -1 && b != -1) {
                union(a, b);
                System.out.printf("Edge %d: (%d, %d) cost: %d\n", ++edges, a, b, min);
                mincost += min;
                cost[a][b] = cost[b][a] = 999;
            }
        }

        System.out.println("Minimum cost = " + mincost);
        scanner.close();
    }

    static int find(int i) {
        while (parent[i] != 0)
            i = parent[i];
        return i;
    }

    static void union(int i, int j) {
        int a = find(i), b = find(j);
        if (a != b)
            parent[b] = a;
    }
}
